== A programmer friendly state machine

An implementation of the [[https://en.wikipedia.org/wiki/Finite-state_machine Finite State Machine pattern.]]

=== Features

 - It is non-deterministic, but has the tools to become deterministic.
 - It allows multiple start states.
 - It allows multiple active states.
 - It allows multiple end states.
 - States and their transitions do not have to form a single graph. Separate graphs may exist inside a single state machine.
 - Each state has a chain of entry and exit actions.
 - Each transition has a chain of actions.
 - It does not do any kind of compilation.
 - Its code is written in a straightforward way, and is hopefully easy to understand.
 - It has a priority system for transitions.
 - It does not have sub state machines; a state machine is not a state.
 - It has transitions that use a state machine for their condition.
 - With the DSL, transitions to a certain state can be added for multiple source states, thereby faking global transitions.
 - It tries to put as few constraints as possible on the user.
 - It has only one dependency: slf4j for logging, which can be configured to use any other logging framework.
 - The state type can be anything.
 - The event type can be anything.
 - The priority type can be anything as long as it's [[scala.math.Ordered Ordered]].
 - It has two, always accessible modes of usage: asking the state machine for the current state, or having the state machine trigger actions that change the user code state.

=== Usage

You will probably want to use a [[com.laamella.code_state_machine.builder.DslStateMachineBuilder builder]] to build a [[com.laamella.code_state_machine.StateMachine state machine.]]
When you have it, you can send it events which will trigger state changes.
To respond to the result,
you can either inspect which states are active and respond to that,
or you can attach actions to state-enter, state-exit and transition events.
